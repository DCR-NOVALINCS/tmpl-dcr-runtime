# --- Energy Communities (EDP-ish Use case) ------------ #
# TODO: description                                      #
#                                                        #
# ------------------------------------------------------ #

# Base plan template, used to create more specific plans
tmpl base_plan(c: Number, p: Number): Plan, calculateMonthlyCost {
    (plan: Plan)[{ consumption: c, production: p }]
    (cmc: calculateMonthlyCost)[?: { isPeakTime: Boolean, rate: Number }]
} => plan, cmc

# Fixed plan template
tmpl fixed_plan(consumption: Number, production: Number) {
    base_plan(c = consumption, p = production) => plan, cmc

    cmc -->> {
        (c: MonthlyCost)[{ cost: (plan.value.consumption - plan.value.production) * @trigger.value.rate }]
    }
}

# Time of use plan template
tmpl time_of_use_plan(consumption: Number, production: Number) {
    base_plan(c = consumption, p = production) => plan, cmc

    cmc -->> {
        if @trigger.value.isPeakTime:
            # Peak time
            # cost = consumption - production * rate
            (c: MonthlyCost)[{ cost: (plan.value.consumption - plan.value.production) * @trigger.value.rate }]
        else:
            # Off peak time
            # cost = consumption - production * rate * 0.8
            # Note: 0.8 = 8 / 10 = 4 / 5
            (c: MonthlyCost)[{ cost: (plan.value.consumption - plan.value.production) * @trigger.value.rate * 4 / 5 }]
        /if
    }
}

# ------------------------------------------------------- #

(ap: addProsumer)[?: { id: String, consumption: Number, production: Number, type: String }]

ap -->> {
    (p: ProsumerInfo)[@trigger.value.id]

    if @trigger.value.type == "fixed":
        fixed_plan(consumption = @trigger.value.consumption, production = @trigger.value.production)
    else:
        time_of_use_plan(consumption = @trigger.value.consumption, production = @trigger.value.production)
    /if
}
